import requests
import re
from docx import Document
from docx.shared import Pt
from docx.oxml.ns import qn
from docx.oxml import OxmlElement

API_URL = "https://api-inference.huggingface.co/models/mistralai/Mixtral-8x7B-Instruct-v0.1"
headers = {"Authorization": "Bearer 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"}

def query_llm(prompt):
    payload = {
        "inputs": prompt,
        "parameters": {
            "temperature": 0.7,
            "max_new_tokens": 1024
        }
    }
    response = requests.post(API_URL, headers=headers, json=payload)
    
    try:
        result = response.json()
        print("–û—Ç–≤–µ—Ç –æ—Ç Hugging face", result)

        if isinstance(result, dict) and result.get("error"):
            raise Exception(f"–û—à–∏–±–∫–∞ –æ—Ç –º–æ–¥–µ–ª–∏: {result['error']}")

        if isinstance(result, list) and "generated_text" in result[0]:
            return result[0]["generated_text"]
        
        if isinstance(result, list) and "output" in result[0]:
            return result[0]["output"]

        raise Exception("–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Å—Ç—Ä—É–∫—Ç—É—Ä—É –æ—Ç–≤–µ—Ç–∞ –æ—Ç –º–æ–¥–µ–ª–∏.")
    
    except Exception as e:
        print("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ—Ç–≤–µ—Ç–∞ –æ—Ç –ò–ò:")
        print(e)
        print("üì¶ –û—Ç–≤–µ—Ç API:")
        print(response.text)
        return ""


def parse_ai_response(text):
    parts = re.split(r'\n(?=\d+\.\s+\*\*)', text.strip())
    data = {}
    for part in parts:
        match = re.match(r'(\d+)\.\s+\*\*(.+?)\*\*\n(.+)', part, re.DOTALL)
        if match:
            _, title, content = match.groups()
            data[title.strip()] = content.strip()
    return data

input_data = {
    "–¢–µ–º–∞ –∑–∞–Ω—è—Ç–∏—è": "–†–∞–±–æ—Ç–∞ —Å –¥–∞—Ç–æ–π –∏ –≤—Ä–µ–º–µ–Ω–µ–º –≤ Python. –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö",
    "–ú–æ–¥—É–ª—å": "–ü—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞ Python",
    "–°–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å": "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏",
    "–ö—É—Ä—Å, –≥—Ä—É–ø–ø–∞": "2 –∫—É—Ä—Å, 2–ü–û-123",
    "–¢–∏–ø –∑–∞–Ω—è—Ç–∏—è": "–ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–æ–µ –∑–∞–Ω—è—Ç–∏–µ",
    "–ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å": "90 –º–∏–Ω—É—Ç",
    "–í–∏–¥—ã –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏": "–ú–∏–Ω–∏-–ª–µ–∫—Ü–∏—è, –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ –∑–∞–¥–∞–Ω–∏—è, —Ä–∞–±–æ—Ç–∞ –≤ –ø–∞—Ä–∞—Ö"
}

prompt = f"""
–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–æ—Å—Ç–∞–≤—å –ø–æ—É—Ä–æ—á–Ω—ã–π –ø–ª–∞–Ω —É—á–µ–±–Ω–æ–≥–æ –∑–∞–Ω—è—Ç–∏—è, –∑–∞–ø–æ–ª–Ω–∏–≤ –≤—Å–µ –ø–æ–ª—è, –ø—Ä–∏–≤–µ–¥—ë–Ω–Ω—ã–µ –Ω–∏–∂–µ. –ü–ª–∞–Ω –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ–¥—Ä–æ–±–Ω—ã–º, –ª–æ–≥–∏—á–Ω–æ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–º –∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å —Ç–µ–º–µ, —Ç–∏–ø—É –∑–∞–Ω—è—Ç–∏—è –∏ –ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º–æ–π –∞—É–¥–∏—Ç–æ—Ä–∏–∏.

–í—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:
- –¢–µ–º–∞ –∑–∞–Ω—è—Ç–∏—è: {input_data['–¢–µ–º–∞ –∑–∞–Ω—è—Ç–∏—è']}
- –ú–æ–¥—É–ª—å / –î–∏—Å—Ü–∏–ø–ª–∏–Ω–∞: {input_data['–ú–æ–¥—É–ª—å']}
- –°–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å / –ö–≤–∞–ª–∏—Ñ–∏–∫–∞—Ü–∏—è: {input_data['–°–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å']}
- –ö—É—Ä—Å / –ì—Ä—É–ø–ø–∞: {input_data['–ö—É—Ä—Å, –≥—Ä—É–ø–ø–∞']}
- –¢–∏–ø –∑–∞–Ω—è—Ç–∏—è: {input_data['–¢–∏–ø –∑–∞–Ω—è—Ç–∏—è']}
- –ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {input_data['–ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å']}
- –ü—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ–º—ã–µ –≤–∏–¥—ã –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏: {input_data['–í–∏–¥—ã –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏']}

–ó–∞–ø–æ–ª–Ω–∏ —Å–ª–µ–¥—É—é—â–∏–µ –ø–æ–ª—è:
1. **–¢–µ–º–∞ –∑–∞–Ω—è—Ç–∏—è**
2. **–ö—É—Ä—Å, –≥—Ä—É–ø–ø–∞**
3. **–¢–∏–ø –∑–∞–Ω—è—Ç–∏—è**
4. **–¶–µ–ª–∏** (–û–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω–∞—è:, –†–∞–∑–≤–∏–≤–∞—é—â–∞—è:, –í–æ—Å–ø–∏—Ç–∞—Ç–µ–ª—å–Ω–∞—è:)
5. **–ó–∞–¥–∞—á–∏**
6. **–û–∂–∏–¥–∞–µ–º—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã**
7. **–ù–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Ä–µ—Å—É—Ä—Å—ã**
8. **–•–æ–¥ –∑–∞–Ω—è—Ç–∏—è** (1. –ê–∫—Ç—É–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–æ–π–¥–µ–Ω–Ω–æ–≥–æ –º–∞—Ç–µ—Ä–∏–∞–ª–∞: (–º–æ–∂–Ω–æ –≤ –≤–∏–¥–µ –æ–ø—Ä–æ—Å–∞, —Ç–µ—Å—Ç–æ–≤, –∫–∞—Ä—Ç–æ—á–µ–∫), 2. –û–±—ä—è—Å–Ω–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –º–∞—Ç–µ—Ä–∏–∞–ª–∞: (–ª–µ–∫—Ü–∏—è, –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—è), 3. –ó–∞–∫—Ä–µ–ø–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –º–∞—Ç–µ—Ä–∏–∞–ª–∞: (–∑–∞–≤–∏—Å–∏—Ç –æ—Ç –ø—Ä–µ–ø–æ–¥–∞–≤–∞–µ–º–æ–≥–æ –ø—Ä–µ–¥–º–µ—Ç–∞ (–≤ –≤–∏–¥–µ —Ç–µ—Å—Ç–æ–≤, –∫–∞—Ä—Ç–æ—á–µ–∫, –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–π —Ä–∞–±–æ—Ç—ã –Ω–∞ –∫–æ–º–ø—å—é—Ç–µ—Ä–µ, –≥—Ä—É–ø–ø–æ–≤–æ–µ –∏ —Ç.–¥), 4. –ó–∞–¥–∞–Ω–∏–µ –Ω–∞ –¥–æ–º:)
9. **–¢–µ—Ö–Ω–æ–ª–æ–≥–∏—è –æ–±—É—á–µ–Ω–∏—è**
10. **–ú–µ–∂–ø—Ä–µ–¥–º–µ—Ç–Ω–∞—è —Å–≤—è–∑—å**
11. **–†–µ—Ñ–ª–µ–∫—Å–∏—è –ø–æ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏—é**
12. **–õ–∏—Ç–µ—Ä–∞—Ç—É—Ä–∞**
13. **–û—Ü–µ–Ω–∏–≤–∞–Ω–∏–µ –æ–±—É—á–∞—é—â–∏—Ö—Å—è**
14. **–î–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ**

–§–æ—Ä–º–∞—Ç: —Ç–µ–∫—Å—Ç —Å —á—ë—Ç–∫–∏–º–∏ –∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø—É–Ω–∫—Ç–∞ –∏ –Ω—É–º–µ—Ä–∞—Ü–∏—è —Ç–∞–∫–æ–≥–æ –≤–∏–¥–∞ 1)
"""

print("--- –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–æ—É—Ä–æ—á–Ω–æ–≥–æ –ø–ª–∞–Ω–∞...")
raw_response = query_llm(prompt)
print("–ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç:", raw_response)
parsed_data = parse_ai_response(raw_response)

template_path = "–ü–ª–∞–Ω —É—á–µ–±–Ω–æ–≥–æ –∑–∞–Ω—è—Ç–∏—è.docx"
doc = Document(template_path)

# for table in doc.tables:
#     for row in table.rows:
#         for cell in row.cells:
#             for key in parsed_data:
#                 if key in cell.text:
#                     cell.text = parsed_data[key]

# for table in doc.tables:
#     for row in table.rows:
#         if len(row.cells) >= 2:
#             first_cell_text = row.cells[0].text.strip()
#             for key in parsed_data:
#                 if key.lower() in first_cell_text.lower():
#                     row.cells[1].text = parsed_data[key]

for table in doc.tables:
    for row in table.rows:
        if len(row.cells) >= 2:
            first_cell_text = row.cells[0].text.strip()
            for key in parsed_data:
                if key.lower() in first_cell_text.lower():
                    cell = row.cells[1]
                    cell.text = ""

                    paragraph = cell.paragraphs[0]
                    run = paragraph.add_run(parsed_data[key])
                    font = run.font
                    font.name = 'Times New Roman'
                    font.size = Pt(14)

                    rPr = run._element.get_or_add_rPr()
                    rFonts = OxmlElement('w:rFonts')
                    rFonts.set(qn('w:ascii'), 'Times New Roman')
                    rFonts.set(qn('w:hAnsi'), 'Times New Roman')
                    rPr.append(rFonts)


output_path = "–ì–æ—Ç–æ–≤—ã–π_–ø–ª–∞–Ω.docx"
doc.save(output_path)

print(f"--- –ü–ª–∞–Ω —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω: {output_path}")